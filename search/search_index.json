{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A library for mass execution of ssh commands and reconnaissance of remote machines fleet. Installation pip pipenv poetry pip install kornet pipenv install kornet poetry add kornet","title":"Home"},{"location":"#installation","text":"pip pipenv poetry pip install kornet pipenv install kornet poetry add kornet","title":"Installation"},{"location":"m0-usage/","text":"Usage Running a strategy in CLI kornet run <strategy_file.yml> <fleet_file.yml> <group> strategy file - yaml strategy file described is Strategies section fleet file - yaml fleet file described in Fleet section group - group to run the strategy on Fast recon kornet recon <recon catalog entry> <username>@<hostname> --port 22 Example: python3 -m kornet recon CPU user@192.168.0.2 Result: Results: cpu: arch: x86_64 cores: 8 model: Intel(R) Core(TM) i5-8265U CPU @ 1.60GHz","title":"Usage"},{"location":"m0-usage/#usage","text":"","title":"Usage"},{"location":"m0-usage/#running-a-strategy-in-cli","text":"kornet run <strategy_file.yml> <fleet_file.yml> <group> strategy file - yaml strategy file described is Strategies section fleet file - yaml fleet file described in Fleet section group - group to run the strategy on","title":"Running a strategy in CLI"},{"location":"m0-usage/#fast-recon","text":"kornet recon <recon catalog entry> <username>@<hostname> --port 22 Example: python3 -m kornet recon CPU user@192.168.0.2 Result: Results: cpu: arch: x86_64 cores: 8 model: Intel(R) Core(TM) i5-8265U CPU @ 1.60GHz","title":"Fast recon"},{"location":"m1-fleet/","text":"Fleet Fleet is a collection of hosts that you want to work with. It's specified either in a .yaml file, or as a dict when using Kornet as a package Hosts file format You need to specify hosts and their groups. Groups so far can store only simple SSH configurations (username, password and port). Each host can override these values by specifying certain fields. hosts : - ip : 192.168.0.2 groups : [ office ] - ip : 192.168.0.3 groups : [ office ] groups : office : ssh : username : root password : toor port : 22 When executing a strategy (explained below), user chooses a group to execute on. Then, ssh configuration of a group is applied to every host in the list. Overriding group's options Sometimes hosts do not conform to a group's settings. And that's a good thing for passwords. To override certain group configuration on the hosts, just explicitly state it in the same format for specific hosts. hosts : - ip : 192.168.0.2 ssh : port : 5022 groups : [ office ] - ip : 192.168.0.3 ssh : username : user password : password groups : [ office ] groups : office : ssh : username : root password : toor port : 22 In the example, host 192.168.0.2 will try to connect to port 5022 instead of 22 with group credentials (root:toor), and 192.168.0.3 will connect to port 22, as specified in the group with it's own credentials (user:password).","title":"Fleet"},{"location":"m1-fleet/#fleet","text":"Fleet is a collection of hosts that you want to work with. It's specified either in a .yaml file, or as a dict when using Kornet as a package","title":"Fleet"},{"location":"m1-fleet/#hosts-file-format","text":"You need to specify hosts and their groups. Groups so far can store only simple SSH configurations (username, password and port). Each host can override these values by specifying certain fields. hosts : - ip : 192.168.0.2 groups : [ office ] - ip : 192.168.0.3 groups : [ office ] groups : office : ssh : username : root password : toor port : 22 When executing a strategy (explained below), user chooses a group to execute on. Then, ssh configuration of a group is applied to every host in the list.","title":"Hosts file format"},{"location":"m1-fleet/#overriding-groups-options","text":"Sometimes hosts do not conform to a group's settings. And that's a good thing for passwords. To override certain group configuration on the hosts, just explicitly state it in the same format for specific hosts. hosts : - ip : 192.168.0.2 ssh : port : 5022 groups : [ office ] - ip : 192.168.0.3 ssh : username : user password : password groups : [ office ] groups : office : ssh : username : root password : toor port : 22 In the example, host 192.168.0.2 will try to connect to port 5022 instead of 22 with group credentials (root:toor), and 192.168.0.3 will connect to port 22, as specified in the group with it's own credentials (user:password).","title":"Overriding group's options"},{"location":"m2-strategy/","text":"Strategies Strategy file format Strategy is a set of orders to execute via SSH. The format is pretty simple: recon : - CPU - OS orders : - name : List all directories command : ls - name : Current path command : pwd recon field is responsible for specifing steps of gathering information about the target host, while orders is a list of commands that need to be executed on the target host. Orders Orders are simple terminal commands with additional options. class Order ( Model ): name : Optional [ str ] = None command : str silent : bool = False outcome : Optional [ OrderOutcome ] = None Configuration Name just specifies a human-readable label of an order, it does not affect anything Silent option can be switched on and off to show/hide the output of the command execution. Can be handy if output is too large. orders : - name : Sample order - command : apt-install vim - silent : yes Outcome Outcome is an abstraction over the result of the order execution. If order is executed successfuly, here will be information about it class OrderOutcome ( Model ): code : int outputs : list [ str ] errors : str Code - exit code of the command, outputs - list of lines outputted by the command, errors - plain error string if anything went wrong.","title":"Strategies"},{"location":"m2-strategy/#strategies","text":"","title":"Strategies"},{"location":"m2-strategy/#strategy-file-format","text":"Strategy is a set of orders to execute via SSH. The format is pretty simple: recon : - CPU - OS orders : - name : List all directories command : ls - name : Current path command : pwd recon field is responsible for specifing steps of gathering information about the target host, while orders is a list of commands that need to be executed on the target host.","title":"Strategy file format"},{"location":"m2-strategy/#orders","text":"Orders are simple terminal commands with additional options. class Order ( Model ): name : Optional [ str ] = None command : str silent : bool = False outcome : Optional [ OrderOutcome ] = None","title":"Orders"},{"location":"m2-strategy/#configuration","text":"Name just specifies a human-readable label of an order, it does not affect anything Silent option can be switched on and off to show/hide the output of the command execution. Can be handy if output is too large. orders : - name : Sample order - command : apt-install vim - silent : yes","title":"Configuration"},{"location":"m2-strategy/#outcome","text":"Outcome is an abstraction over the result of the order execution. If order is executed successfuly, here will be information about it class OrderOutcome ( Model ): code : int outputs : list [ str ] errors : str Code - exit code of the command, outputs - list of lines outputted by the command, errors - plain error string if anything went wrong.","title":"Outcome"},{"location":"m3-recon/","text":"Recon Recon is a type of an order that returns either plain str or MachineFacts object. Warning As everything in this library, these approaches were only tested on Ubuntu and Raspbian. Do not rely on it too much. Nevertheless, recon is read-only and expected to be non-destructive. Catalog HOSTNAME - hostname of a machine hostname: office-1 CPU - architecture, number of cores and model of the CPU cpu: arch: x86_64 cores: 8 model: Intel(R) Core(TM) i5-8265U CPU @ 1.60GHz RAM - available and total RAM in bytes ram: available: 185180 total: 7863628 OS - name and version of the OS os: name: Ubuntu version: 20.04.4 LTS (Focal Fossa) Machine Facts class MachineFacts ( Model ): hostname : Optional [ str ] = None cpu : Optional [ Processor ] = None ram : Optional [ RAM ] = None os : Optional [ OS ] = None Hostname A plain string value returned from a hostname command. OS class OS ( MachineInfo ): name : str version : str Parses info in output of cat /etc/os-release CPU CPU structures information about CPU of the target machine: class Processor ( MachineInfo ): model : str cores : int arch : str It gets it by executing and parsing three commands: cat /proc/cpuinfo && getconf _NPROCESSORS_ONLN && arch Memory Memory is a parent for all parameters following a memory format: having total bytes and available bytes class Memory ( MachineInfo ): total : int available : int RAM class RAM ( Memory ): pass Gets ram by executing free command. Disk class Disk ( Memory ): pass Not implemented","title":"Recon"},{"location":"m3-recon/#recon","text":"Recon is a type of an order that returns either plain str or MachineFacts object. Warning As everything in this library, these approaches were only tested on Ubuntu and Raspbian. Do not rely on it too much. Nevertheless, recon is read-only and expected to be non-destructive.","title":"Recon"},{"location":"m3-recon/#catalog","text":"HOSTNAME - hostname of a machine hostname: office-1 CPU - architecture, number of cores and model of the CPU cpu: arch: x86_64 cores: 8 model: Intel(R) Core(TM) i5-8265U CPU @ 1.60GHz RAM - available and total RAM in bytes ram: available: 185180 total: 7863628 OS - name and version of the OS os: name: Ubuntu version: 20.04.4 LTS (Focal Fossa)","title":"Catalog"},{"location":"m3-recon/#machine-facts","text":"class MachineFacts ( Model ): hostname : Optional [ str ] = None cpu : Optional [ Processor ] = None ram : Optional [ RAM ] = None os : Optional [ OS ] = None","title":"Machine Facts"},{"location":"m3-recon/#hostname","text":"A plain string value returned from a hostname command.","title":"Hostname"},{"location":"m3-recon/#os","text":"class OS ( MachineInfo ): name : str version : str Parses info in output of cat /etc/os-release","title":"OS"},{"location":"m3-recon/#cpu","text":"CPU structures information about CPU of the target machine: class Processor ( MachineInfo ): model : str cores : int arch : str It gets it by executing and parsing three commands: cat /proc/cpuinfo && getconf _NPROCESSORS_ONLN && arch","title":"CPU"},{"location":"m3-recon/#memory","text":"Memory is a parent for all parameters following a memory format: having total bytes and available bytes class Memory ( MachineInfo ): total : int available : int","title":"Memory"},{"location":"m3-recon/#ram","text":"class RAM ( Memory ): pass Gets ram by executing free command.","title":"RAM"},{"location":"m3-recon/#disk","text":"class Disk ( Memory ): pass Not implemented","title":"Disk"}]}